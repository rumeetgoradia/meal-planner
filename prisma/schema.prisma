// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Recipe       Recipe[]
    Ingredient   Ingredient[]
    MealSchedule MealSchedule[]
    Tag          Tag[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Recipe {
    id String @id @default(cuid())

    title    String
    servings Int    @default(1)
    notes    String @db.VarChar(5000)

    calories Int
    protein  Int
    fats     Int
    carbs    Int

    tags        Tag[]
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    PlannedMeal PlannedMeal[]
}

model MealSchedule {
    id String @id @default(cuid())

    plannedMeals PlannedMeal[]

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model PlannedMeal {
    id String @id @default(cuid())

    day            DayOfTheWeek @relation(fields: [dayOfTheWeekId], references: [id])
    dayOfTheWeekId String

    recipe   Recipe? @relation(fields: [recipeId], references: [id])
    recipeId String?

    MealSchedule   MealSchedule? @relation(fields: [mealScheduleId], references: [id])
    mealScheduleId String?
}

model Ingredient {
    id String @id @default(cuid())

    title String
    unit  String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Tag {
    id    String @id @default(cuid())
    title String

    user     User    @relation(fields: [userId], references: [id])
    userId   String
    Recipe   Recipe? @relation(fields: [recipeId], references: [id])
    recipeId String?
}

model DayOfTheWeek {
    id          String @id @default(cuid())
    day         String
    orderInWeek Int

    PlannedMeal PlannedMeal[]
}
